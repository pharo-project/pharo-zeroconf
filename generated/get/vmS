#!/bin/bash
#<html><head><!--
# The above line makes a fake HTML document out of this bash script

# stop the script if a single command fails
set -e

# define an echo that only outputs to stderr
echoerr() { echo "$@" 1>&2; }
#  try to use curl if possible
if [[ `which curl &> /dev/null` ]]; then
	DOWNLOAD="curl --silent --location --compressed ";
	DOWNLOAD_TO="$DOWNLOAD --output ";
elif [[ `which wget` ]]; then
	DOWNLOAD_TO="wget --quiet --output-document=";
	DOWNLOAD="$DOWNLOAD_TO-";
else
	echo "Please install curl or wget on your machine";
	exit 1
fi



# ARGUMENT HANDLING =============================================================
if { [ "$1" = "-h" ] || [ "$1" = "--help" ]; }; then
	echo "This script downloads the latest PharoS VM.
The following artifacts are created:
    pharo-vm/  Directory containing the VM
    pharoS     Script to run the downloaded VM in headless mode
    pharoS-ui  Script to run the downloaded VM in UI mode
"
	exit 0;
elif [ $# -gt 0 ]; then
	echo "--help is the only argument allowed"
	exit 1;
fi


# VM PROPERTIES =================================================================
VM_TYPE="pharoS"
VM_BINARY_NAME="PharoS"
VM_BINARY_NAME_LINUX="pharoS"


# DETECT SYSTEM PROPERTIES ======================================================
TMP_OS=`uname | tr "[:upper:]" "[:lower:]"`
if [[ "{$TMP_OS}" = *windows* ]]; then
    OS="win";
elif [[ "{$TMP_OS}" = *mingw* ]]; then
    OS="win";
elif [[ "{$TMP_OS}" = *darwin* ]]; then
    OS="mac";
elif [[ "{$TMP_OS}" = *linux* ]]; then
    OS="linux";
else
    echo "Unsupported OS";
    exit 1;
fi

if [ -z "$ARCHITECTURE" ] ; then
    ARCHITECTURE=32;
fi


# DOWNLOAD THE LATEST PHAROS VM =================================================
VM_URL="http://files.pharo.org/vm/${VM_TYPE}/${OS}/${VM_TYPE}-${OS}-stable.zip"
VM_DIR="pharo-vm"

echoerr "Downloading the latest ${VM_TYPE}VM:"
echoerr "	$VM_URL"

mkdir $VM_DIR
$DOWNLOAD_TO$VM_DIR/vm.zip $VM_URL

unzip -q -d $VM_DIR $VM_DIR/vm.zip
rm -rf $VM_DIR/vm.zip

if [ "$OS" == "win" ]; then
    PHARO_VM=`find $VM_DIR -name ${VM_BINARY_NAME}.exe`
elif [ "$OS" == "mac" ]; then
    PHARO_VM=`find $VM_DIR -name ${VM_BINARY_NAME}`
elif [ "$OS" == "linux" ]; then
    PHARO_VM=`find $VM_DIR -name ${VM_BINARY_NAME_LINUX}`
fi

echo $PHARO_VM


# DOWNLOAD THE PHARO ARCHIVED SOURCES FILE ======================================
if [ "$OS" = "mac" ]; then
	SOURCES_DIR=$VM_DIR;
else
	SOURCES_DIR=`dirname $PHARO_VM`;
fi

SOURCES_URL="http://files.pharo.org/image/"

download_sources() {
	echoerr "Downloading $1.sources:"
	echoerr "	$SOURCES_URL/$1.sources.zip"
	$DOWNLOAD_TO$VM_DIR/sources.zip $SOURCES_URL/$1.sources.zip
	unzip -q -d $SOURCES_DIR $VM_DIR/sources.zip
	rm -rf $VM_DIR/sources.zip
}

download_sources PharoV10 
download_sources PharoV20


# CREATE THE VM LAUNCHER SCRIPTS ================================================
create_vm_script() {
	VM_SCRIPT=$1
	
	echo "#!/bin/bash" > $VM_SCRIPT
	echo '# some magic to find out the real location of this script dealing with symlinks
DIR=`readlink "$0"` || DIR="$0";
DIR=`dirname "$DIR"`;
cd "$DIR"
DIR=`pwd`
cd - > /dev/null 
# disable parameter expansion to forward all arguments unprocessed to the VM
set -f
# run the VM and pass along all arguments as is' >> $VM_SCRIPT
	
	# make sure we only substite $PHARO_VM but put "$DIR" in the script
	echo -n \"\$DIR\"/\"$PHARO_VM\" >> $VM_SCRIPT
	
	# only output the headless option if the VM_SCRIPT name does not include "ui"
	if [[ "{$VM_SCRIPT}" != *ui* ]]; then
		# output the headless option, which varies under each platform
		if [ "$OS" == "linux" ]; then
		    echo -n " -vm-display-null " >> $VM_SCRIPT
		else
		    echo -n " -headless" >> $VM_SCRIPT
		fi
	fi
	
	# forward all arguments unprocessed using $@
	echo " \"\$@\"" >> $VM_SCRIPT
	
	# make the script executable
	chmod +x $VM_SCRIPT
}

echoerr "Creating starter scripts pharo and pharo-ui"
create_vm_script "vm.sh"
create_vm_script "vm-ui.sh"
create_vm_script "pharo"
create_vm_script "pharo-ui"


# TEST VM REQUIREMENTS UNDER LINUX ==============================================
if [ "$OS" == "linux" ]; then
	$PHARO_VM -help -vm-display-null > /dev/null 2>&1 || (\
		echo "Please install the 32bit libraries"; \
		echo "   sudo aptitude install ia32-libs" )
fi


# HTML HELP =====================================================================
HTML_HELP=<<HTML_HELP 
-->
<title>Pharo Zeroconf Script</title>
<style>
	BODY, TABLE { 
		font-family: Arial;
	}
	CODE { 
		background-color: #DDD;
		padding: 0.5em 0.8em;
		border-radius: 0.5em;
		line-height: 2.5em;
	}
	A { 
		color: black;
	}
	</style>
<body  style="background-color:white; margin-top:-1em">
<h1>Pharo Zeroconf Script</h1>
<p>This script downloads the latest PharoS VM.</p>
<h2>Usage</h2>
<code>curl -L <a href="http://get.pharo.org/vmS">get.pharo.org/vmS</a> | bash </code>
<br/>
or if <code>curl</code> is not available: </br>
<code>wget -O- <a href="http://get.pharo.org/vmS">get.pharo.org/vmS</a> | bash </code>

<h2>Artifacts</h2>
<table><tr><td>pharo-vm/</td><td>Directory containing the VM</td></tr>
<tr><td>pharoS</td><td>Script to run the downloaded VM in headless mode</td></tr>
<tr><td>pharoS-ui</td><td>Script to run the downloaded VM in UI mode</td></tr></table>

<!--
HTML_HELP
# --!></body></html>